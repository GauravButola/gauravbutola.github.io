<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Gaurav Butola]]></title>
  <link href="http://butola.com/atom.xml" rel="self"/>
  <link href="http://butola.com/"/>
  <updated>2015-08-29T21:41:19+05:30</updated>
  <id>http://butola.com/</id>
  <author>
    <name><![CDATA[Gaurav Butola]]></name>
    <email><![CDATA[gauravbutola@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Angular and Tryton based web application with angular-tryton]]></title>
    <link href="http://butola.com/blog/2015/01/19/angular-and-tryton-based-web-application-with-angular-tryton/"/>
    <updated>2015-01-19T00:04:12+05:30</updated>
    <id>http://butola.com/blog/2015/01/19/angular-and-tryton-based-web-application-with-angular-tryton</id>
    <content type="html"><![CDATA[<p>If AngularJS is your choice of frontend development framework, and you are working
with Tryton, then angular-tryton may just be what you need to create your next
Tryton and AngularJS powered single page web application or mobile app.</p>

<!-- more -->


<h2>What&rsquo;s angular-tryton, anyway?</h2>

<p>angular-tryton lets your angular app interact with Tryton the same way Tryton GTK
client does; only now, you decide what data you want to get and how you want to present
it in your app, hopefully you&rsquo;ll make something better than the GTK client ;)</p>

<p>If you really want to dig into details about how angular-tryton works, it&rsquo;s
probably a good idea to konw how the Tryton GTK client works, because that is
exactly the same way angular-tryton interacts with the Tryton server AKA trytond.</p>

<p>In fact angular-tryton enforces the exact permissions as the Tryton client does but
with angular-tryton you can handle the responses, the way you want, keeping in
mind the UI/UX of your app.</p>

<h3>How Tryton works</h3>

<p>Essentially, the Tryton client makes RPC calls to trytond and fetches the
required data and/or makes changes to records.
If you&rsquo;re curious about what RPC requests the Tryton client makes, you can run the
Tryton GTK client in debug mode.</p>

<p>Run the following command in your terminal if you have tryton already installed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tryton --log-level<span class="o">=</span>debug
</span></code></pre></td></tr></table></div></figure>


<p>Then log in, and you&rsquo;ll find, the terminal where you started Tryton in debug mode,
get flooded with unintelligible logs, but if you pay attention to one of those logs
starting with <code>INFO:</code>, you can make sense of what&rsquo;s happening.</p>

<p>Tryton client  makes RPC calls to trytond and calls a method which may be
any valid method documented in the Tryton API (create, write, search, read, etc).</p>

<p>You can do exactly the same thing with the power of angular-tryton in you Angular
app.</p>

<h3>How angular-tryton works</h3>

<p>Now you know how Tryton&rsquo;s GTK client works, time to understand how you can use angular-tryton
to have the same superpowers that Tryton client has.</p>

<p>angular-tryton, out of the box provides you 2 services <code>tryton</code> and <code>session</code>.
So, the basic idea is <code>tryton</code> service is used for all the RPC calls which don&rsquo;t
require a session i.e. if you don&rsquo;t have to be logged in to access a method
for example:</p>

<p>Getting trytond server version.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">tryton</span><span class="p">.</span><span class="nx">getServerVersion</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Getting a list of databases</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">tryton</span><span class="p">.</span><span class="nx">rpc</span><span class="p">(</span><span class="s1">&#39;common.list&#39;</span><span class="p">,</span> <span class="p">[</span><span class="kc">null</span><span class="p">,</span> <span class="kc">null</span><span class="p">])</span>
</span><span class='line'><span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">databases</span> <span class="o">=</span> <span class="nx">response</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>And <code>session</code> service is for making RPC calls to the methods which require a
tryton user to be logged in like: search, read, create write, etc.</p>

<p>Log into tryton.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">session</span><span class="p">.</span><span class="nx">doLogin</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">database</span><span class="p">,</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">username</span><span class="p">,</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">password</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">){</span>
</span><span class='line'>    <span class="c1">// Yay! user logged in.</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">reason</span><span class="p">){</span>
</span><span class='line'>    <span class="c1">// Handle login failure.</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>After login, access Tryton&rsquo;s methods.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Create a pyson domain</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">domain</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;=&#39;</span><span class="p">,</span> <span class="mi">42</span><span class="p">]</span>
</span><span class='line'><span class="p">];</span>
</span><span class='line'><span class="c1">// Call search_read method over RPC with the domain.</span>
</span><span class='line'><span class="nx">session</span><span class="p">.</span><span class="nx">rpc</span><span class="p">(</span><span class="s1">&#39;model.party.party.search_read&#39;</span><span class="p">,</span> <span class="p">[</span><span class="nx">domain</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>In future post we&rsquo;ll discover how we can use this capability of angular-tryton
to create something useful. How about a cordova based mobile application may be?</p>
]]></content>
  </entry>
  
</feed>
