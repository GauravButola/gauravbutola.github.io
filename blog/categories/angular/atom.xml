<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Angular | Gaurav Butola]]></title>
  <link href="http://butola.com/blog/categories/angular/atom.xml" rel="self"/>
  <link href="http://butola.com/"/>
  <updated>2016-03-14T16:33:25+05:30</updated>
  <id>http://butola.com/</id>
  <author>
    <name><![CDATA[Gaurav Butola]]></name>
    <email><![CDATA[gauravbutola@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Set up push notification for Cordova/Phonegap app on Parse.com platform]]></title>
    <link href="http://butola.com/blog/2016/01/03/set-up-push-notification-for-cordova-slash-phonegap-app-on-parse-dot-com-platform/"/>
    <updated>2016-01-03T17:16:45+05:30</updated>
    <id>http://butola.com/blog/2016/01/03/set-up-push-notification-for-cordova-slash-phonegap-app-on-parse-dot-com-platform</id>
    <content type="html"><![CDATA[<p>Creating hybrid apps with Cordova can sometimes be a real pain because not a lot
of platforms have bindings for it.</p>

<p>I&rsquo;ve recently been working on a hybrid app using Facebook&rsquo;s Parse platform which
provides, a very easy backend solution for creating apps along with SDK for most
of the platform you might need, to create app for. Parse also has an easy way to
integrate push notifications for your apps, BUT, the SDK only supports native apps.
No love for the JS SDK. So, if you&rsquo;re building a native iOS or Android app, you&rsquo;re
golden, but if it&rsquo;s a hybrid app, you are out of luck.</p>

<!-- more -->


<h3>There are some plugins we might use, right?</h3>

<p>Well, not really, there are a <a href="https://github.com/cranberrygame/cordova-plugin-pushnotification-parsepushnotification">bunch</a>
<a href="https://github.com/taivo/parse-push-plugin">of</a> <a href="https://github.com/avivais/phonegap-parse-plugin">plugins</a>
which might help you, but most of them are either outdated, require changes to the
native code or both. I tried a bunch of them and none seem to have worked for me.</p>

<p>Besides, if it can be done using JS in a hybrid app, I always prefer that over
depending on Cordova plugin.</p>

<p>So, what is the solution then, are we dead in the water if we want to create
a hybrid app with parse and be able to send push notifications from parse?
The answer is no, if you understand how parse really works and how it registers
your device and sends push notifications to the device, you&rsquo;ll e easily be able
to configure push notifications for your hybrid app without touching any native
client code or using any Parse specific Cordova plugin, sounds good? Let&rsquo;s see how we can do it&hellip;</p>

<h3>How Parse push notifications work</h3>

<p>If you were creating a native mobile application with parse, it would create a
new installation record <code>Parse.Instllation</code> record for your device in the
<code>_Installation</code> class in the Parse dashboard.</p>

<p>This record would contain details about the device your app is installed in;
the details we are interested in are: <code>deviceToken</code>, <code>deviceType</code>, <code>installationId</code>,
and <code>timeZone</code>.</p>

<p>All you have to do to be able to send push notification is, create a new record
manually of <code>Parse.Installation</code> and provide the fields we need to sending push
notifications and that&rsquo;s it, you&rsquo;ll be able to send the push notification.</p>

<h3>Manually create a new installation for the app</h3>

<p>We need to following information for the installation record.</p>

<h4>Device Token</h4>

<p>Firstly we must have a device token &ndash; it is an identifier of your device, which
the push notificaition server uses to make sure it sends the message to your device
and not your neighbour&rsquo;s phone.</p>

<p><a href="https://github.com/phonegap-build/PushPlugin">Install</a> the official Cordova/Phonegap
push notification plugin to get the device token. Follow their documentation on
how to get the device token, it&rsquo;s pretty straightforward.</p>

<h4>Installation ID</h4>

<p>Every Parse application is provided with an installation ID, whether it&rsquo;s mobile
app, Web app.</p>

<p>Get the installation ID from current session:</p>

<p>```javascript
&hellip;
// Get the current installation
Parse.Session.current();</p>

<pre><code>.then(function(session) {
    var installationId = session.get('installationId');
    ...
})
</code></pre>

<p>```</p>

<h4>Device Type</h4>

<p>This can be either <code>android</code> or <code>ios</code> depending on the current device the app is
installed on.</p>

<h4>Time Zone</h4>

<p>Timezone is very critical for push notifications, if you want to send a push notification
on user&rsquo;s local timezone. If you&rsquo;re using <code>moment</code>, it&rsquo;s as simple as <code>moment.tz.guess()</code>.</p>

<p>And that&rsquo;s it that&rsquo;s it, you can now send push notification to your device now
and you didn&rsquo;t even need any Parse specific push notification plugin for cordova.</p>

<p>Here&rsquo;s how my final code looks after implementing the whole thing in AngularJS.</p>

<p>```javascript
var _registerPushNotification = function() {</p>

<pre><code>return $cordovaPush.register({'badge': true, 'sound': true, 'alert': true})
  .then(function(deviceToken) { 
    ParseSDK.deviceToken = deviceToken;
    // Get the current installation
    return Parse.Session.current();
  })
  .then(function(session) {
    ParseSDK.session = session;
    // Check if current user has an instllation record for this device
    var installationQuery = (new Parse.Query(Parse.Installation))
      .equalTo('user', ParseSDK.currentUser)
      .equalTo('installationId', ParseSDK.session.get('installationId'))
      .equalTo('deviceToken', ParseSDK.deviceToken);
    return installationQuery.first();
  })
  .then(function(result) {
    if(result) {
      // This device is already registered with the current user
      return Parse.Promise.as();
    }
    // Device is not registered with the current user
    var installation = new Parse.Installation();
    return installation.save({
      'user': ParseSDK.current,
      'installationId': ParseSDK.session.get('installationId'),
      'deviceToken': ParseSDK.deviceToken,
      'deviceType': 'ios',
      'timeZone': moment.tz.guess(),
      'appName': 'afitgo',
      'appIdentifier': 'com.afitgo',
      'appVersion': null, // TODO
      'localeIdentifier': window.navigator.userLanguage || window.navigator.language
    });
  }, function(err) {
    console.error('Error trying to register push notification ', err);
});
</code></pre>

<p>  };
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Angular and Tryton based web application with angular-tryton]]></title>
    <link href="http://butola.com/blog/2015/01/19/angular-and-tryton-based-web-application-with-angular-tryton/"/>
    <updated>2015-01-19T00:04:12+05:30</updated>
    <id>http://butola.com/blog/2015/01/19/angular-and-tryton-based-web-application-with-angular-tryton</id>
    <content type="html"><![CDATA[<p>If AngularJS is your choice of frontend development framework, and you are working
with Tryton, then angular-tryton may just be what you need to create your next
Tryton and AngularJS powered single page web application or mobile app.</p>

<!-- more -->


<h2>What&rsquo;s angular-tryton, anyway?</h2>

<p>angular-tryton lets your angular app interact with Tryton the same way Tryton GTK
client does; only now, you decide what data you want to get and how you want to present
it in your app, hopefully you&rsquo;ll make something better than the GTK client ;)</p>

<p>If you really want to dig into details about how angular-tryton works, it&rsquo;s
probably a good idea to konw how the Tryton GTK client works, because that is
exactly the same way angular-tryton interacts with the Tryton server AKA trytond.</p>

<p>In fact angular-tryton enforces the exact permissions as the Tryton client does but
with angular-tryton you can handle the responses, the way you want, keeping in
mind the UI/UX of your app.</p>

<h3>How Tryton works</h3>

<p>Essentially, the Tryton client makes RPC calls to trytond and fetches the
required data and/or makes changes to records.
If you&rsquo;re curious about what RPC requests the Tryton client makes, you can run the
Tryton GTK client in debug mode.</p>

<p>Run the following command in your terminal if you have tryton already installed.</p>

<p><code>bash
tryton --log-level=debug
</code></p>

<p>Then log in, and you&rsquo;ll find, the terminal where you started Tryton in debug mode,
get flooded with unintelligible logs, but if you pay attention to one of those logs
starting with <code>INFO:</code>, you can make sense of what&rsquo;s happening.</p>

<p>Tryton client  makes RPC calls to trytond and calls a method which may be
any valid method documented in the Tryton API (create, write, search, read, etc).</p>

<p>You can do exactly the same thing with the power of angular-tryton in you Angular
app.</p>

<h3>How angular-tryton works</h3>

<p>Now you know how Tryton&rsquo;s GTK client works, time to understand how you can use angular-tryton
to have the same superpowers that Tryton client has.</p>

<p>angular-tryton, out of the box provides you 2 services <code>tryton</code> and <code>session</code>.
So, the basic idea is <code>tryton</code> service is used for all the RPC calls which don&rsquo;t
require a session i.e. if you don&rsquo;t have to be logged in to access a method
for example:</p>

<p>Getting trytond server version.
<code>javascript
tryton.getServerVersion()
</code></p>

<p>Getting a list of databases
```javascript
tryton.rpc(&lsquo;common.list&rsquo;, [null, null])
.success(function(response){</p>

<pre><code>$scope.databases = response;
</code></pre>

<p>});
```</p>

<p>And <code>session</code> service is for making RPC calls to the methods which require a
tryton user to be logged in like: search, read, create write, etc.</p>

<p>Log into tryton.
```javascript
session.doLogin($scope.user.database, $scope.user.username, $scope.user.password)
.success(function(response){</p>

<pre><code>// Yay! user logged in.
</code></pre>

<p>})
.error(function(reason){</p>

<pre><code>// Handle login failure.
</code></pre>

<p>});
```</p>

<p>After login, access Tryton&rsquo;s methods.
```javascript
// Create a pyson domain
var domain = [</p>

<pre><code>['id', '=', 42]
</code></pre>

<p>];
// Call search_read method over RPC with the domain.
session.rpc(&lsquo;model.party.party.search_read&rsquo;, [domain]);
```</p>

<p>In future post we&rsquo;ll discover how we can use this capability of angular-tryton
to create something useful. How about a cordova based mobile application may be?</p>
]]></content>
  </entry>
  
</feed>
